{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	// "Create component": {
	// 	"scope": "javascript",
	// 	"prefix": "mkcomponent",
	// 	"body": []
	// }
	"Create service utils": {
		// "scope": "javascript",
		"prefix": "service",
		"description": "Create service utils",
		"body": [
			"export function receive$1Response(state, data) {",
			"    state.services.$2.response = data;",
			"",
			"    if (data.response && !(data.errors && data.errors.length > 0)) {",
			"",
			"    }",
			"",
			"    state.services.$2.fetching = false;",
			"    state.services.$2.requested = false;",
			"    return state;",
			"}",
			"",
			"export function isFetching$1(state) {",
			"    return state.services.$2.fetching;",
			"}",
			"",
			"export function setIsFetching$1(state, value) {",
			"    state.services.$2.fetching = value;",
			"    return state;",
			"}",
			"",
			"export function setShouldFetch$1(state, value) {",
			"    state.services.$2.requested = value;",
			"    return state;",
			"}",
			"",
			"export function get$1Response(state) {",
			"    return state.services.$2.response;",
			"}",
			"",
			"export function get$1Errors(state) {",
			"    const response = get$1Response(state);",
			"    return (response && response.errors) || [];",
			"}",
			"",
			"export function shouldFetch$1(state) {",
			"    return !isFetching$1(state)",
			"        && state.services.$2.requested",
			"        && !get$1Response(state);",
			"}",
			"",
			"export function has$1Errors(state) {",
			"    return get$1Errors(state).length > 0;",
			"}"
		]
	},
	"Create ES error mock function": {
		// "scope": "javascript",
		"prefix": "error-mock",
		"description": "ES error mock function",
		"body": [
			"    function getErrorResponseObjectFromjqXHR(jqXHR) {",
			"        return {",
			"            errors: [{",
			"                code: jqXHR.status,",
			"                message: jqXHR.statusText",
			"            }]",
			"        };",
			"    }"
		]
	},
	"Create ajax call with utils": {
		// "scope": "javascript",
		"prefix": "csw-ajax",
		"description": "Ajax call with refrences to corresponding service utils",
		"body": [
			"function fetch$1() {",
			"    ajax.ajax({",
			"        url: serviceEndpoints.$2,",
			"        data: {",
			"",
			"        }",
			"    }).done(function (data) {",
			"        model.swap($3.receive$1Response, data);",
			"    }).fail(function (jqXHR) {",
			"        model.swap($3.receive$1Response, getErrorResponseObjectFromjqXHR(jqXHR));",
			"    });",
			"}"
		]
	},
	"Create view component": {
		// "scope": "javascript",
		"prefix": "csw-view",
		"description": "Basic view component",
		"body": [
			"import React from 'react';",
			"import texts from 'di-json!./nls/texts';",
			"import * as i18nHelper from 'util.text.i18n.helper.id1/js/i18nHelper';",
			"import responsiveBlockMaker from 'react.component.misc.id1/js/responsiveBlock';",
			"",
			"export default function ({elq}) {",
			"",
			"    function Content(props) {",
			"        return (",
			"            <div></div>",
			"        );",
			"    }",
			"",
			"    return function (props) {",
			"        const ResponsiveBlock = responsiveBlockMaker({elq});",
			"",
			"        return (",
			"            <ResponsiveBlock sizeBreakpoints={{small: 0, medium: 450}}>",
			"                <Content {...props} />",
			"            </ResponsiveBlock>",
			"        );",
			"    };",
			"}",
			""
		]
	}
}